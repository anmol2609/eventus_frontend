/**
 * @fileoverview gRPC-Web generated client stub for interface
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.3
// source: interface.proto


/* eslint-disable */
// @ts-nocheck

import grpc from 'grpc-web';
import * as proto from './interface_pb.js';
/**
 * @class
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.ClientOptions} options
 */
class InterfaceServiceClient {
  constructor(hostname, credentials, options = {}) {
    options.format = 'text';

    /**
     * @private @const {!grpc.GrpcWebClientBase} The client
     */
    this.client_ = new grpc.GrpcWebClientBase(options);

    /**
     * @private @const {string} The hostname
     */
    this.hostname_ = hostname.replace(/\/+$/, '');
  }

  /**
   * @param {!proto.InterfaceRequest} request The
   *     request proto
   * @param {?Object<string, string>} metadata User defined
   *     call metadata
   * @param {function(?grpc.RpcError, ?proto.InterfaceResponse)}
   *     callback The callback function(error, response)
   * @return {!grpc.ClientReadableStream<!proto.InterfaceResponse>|undefined}
   *     The XHR Node Readable Stream
   */
  sendRequest(request, metadata, callback) {
    return this.client_.rpcCall(this.hostname_ + '/interface.InterfaceService/SendRequest',
      request,
      metadata || {},
      methodDescriptor_InterfaceService_SendRequest,
      callback);
  }
}

/**
 * @class
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.ClientOptions} options
 */
class InterfaceServicePromiseClient {
  constructor(hostname, credentials, options = {}) {
    options.format = 'text';

    /**
     * @private @const {!grpc.GrpcWebClientBase} The client
     */
    this.client_ = new grpc.GrpcWebClientBase(options);

    /**
     * @private @const {string} The hostname
     */
    this.hostname_ = hostname.replace(/\/+$/, '');
  }

  /**
   * @param {!proto.InterfaceRequest} request The
   *     request proto
   * @param {?Object<string, string>=} metadata User defined
   *     call metadata
   * @return {!Promise<!proto.InterfaceResponse>}
   *     Promise that resolves to the response
   */
  sendRequest(request, metadata = {}) {
    return this.client_.unaryCall(this.hostname_ + '/interface.InterfaceService/SendRequest',
      request,
      metadata,
      methodDescriptor_InterfaceService_SendRequest);
  }
}

/**
 * @const
 * @type {!grpc.MethodDescriptor<
 *   !proto.InterfaceRequest,
 *   !proto.InterfaceResponse>}
 */
const methodDescriptor_InterfaceService_SendRequest = new grpc.MethodDescriptor(
  '/interface.InterfaceService/SendRequest',
  grpc.MethodType.UNARY,
  proto.InterfaceRequest,
  proto.InterfaceResponse,
  (request) => request.serializeBinary(),
  proto.InterfaceResponse.deserializeBinary
);

export { InterfaceServiceClient, InterfaceServicePromiseClient };
